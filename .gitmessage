

#ex) Feat : 관심지역 알림 ON/OFF 기능 추가(#123) // 새로운 기능을 추가할 때
#ex) Fix : 책에서 가능한 페이지 조합 오류 수정 // 버그를 수정할 때
#ex) Docs : Documentation // 문서 수정(README파일 수정할 때가 아닐까?)
#ex) Style: 변수명 변경 및 코드 스타일 수정 // 코드 포맷팅, 세미콜론 누락, 코드 변경이 없는 경우
#ex) Refactor : 이메일 확인 정규표현식으로 변경 // 코드 리팩토링
#ex) Test : When adding missing test // 테스트를 더하는것을 깜빡했을 때
#ex) Comment : 함수 주석 추가

#--------------------------------------------

# <1. 태그와 제목 쓰는 방법>
# 타입은 태그와 제목으로 구성되며, 태그는 영어로 쓰며 첫 문자는 대문자로 한다.
# [태그: 제목]의 형태로 작성한다.
# feat : 새로운 기능 추가
# fix : 버그 수정
# docs : 문서 수정
# style : 코드 포맷팅, 세미콜론 누락, 코드 변경이 없는 경우
# refactor : 코드 리팩토링
# test : 테스트 코드, 리펙토링 테스트 코드 추가
# chore : 기타 변경 사항(실제 기능과 무관한 빌드, 패키지 수정. ex) gitcommit 파일 수정 등)
# ex) bug: wrong parameter

# My Commit Message Template
# 1. 당신이 왜 이렇게 바꾸었는지에 먼저 주목하라.
# 2. 바꾸기 전에 무엇을 했는지 (그리고 무엇이 잘못 동작했는지),
# 3. 지금은 어떻게 동작하는지,
# 4. 그리고 왜 당신이 그렇게 바꾸기로 했는지 적어라

# 기본적인 커밋 메시지의 구조 : 제목 / 본문 / 꼬리말. 각 파트는 빈 줄을 두어 구분한다

# <2. 본문을 쓰는 방법>
# 본문은 한 줄 당 72자 내로 작성한다
# 본문 내용은 양을 신경쓰지 않고 최대한 상세하게 작성한다
# 본문 내용은 어떻게 변경했는지 보다 무엇을 변경했는지 또는 왜 변경했는지를 설명한다.

# <좋은 커밋 메세지를 작성하기 위한 7가지 법칙>
# 1. 제목과 본문은 한 줄 띄워 분리한다
# 2. 제목은 영문 기준 50자 이내로 한다
# 3. 제목의 첫 글자를 대문자로 한다
# 4. 제목을 '.'으로 마치지 않도록 한다
# 5. 제목은 동사가 가장 앞에 나오도록 명령문으로 한다
# 6. 본문은 영문 기준 72자마다 줄을 바꾼다
# 7. 본문은 어떻게 보다 무엇을, 왜에 맞추어서 작성한다

# <3. 꼬릿말을 쓰는 방법>
# 꼬릿말은 선택이며, 이슈 트래커 ID를 작성한다.
# [유형: #이슈 번호]의 형식으로 작성하는 것이 관례이다.
# 여러개의 이슈 번호를 적을 때에는 쉽표(,)로 구분한다

# <종합적인 Commit 예시>

# Feat: "회원 가입 기능 구현"

# SMS, 이메일 중복확인 API 개발

# Resolves: #123
# Ref: #456
# Related to: #48, #45

# ------------------------------------------끝------------------------------------------
